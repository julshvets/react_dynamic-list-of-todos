{"version":3,"sources":["api.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","types/StatusFilter.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","catch","Response","Error","TodoInfo","_ref","todoFromServer","setSelectedTodo","selectedTodo","id","title","completed","isSelected","_jsxs","className","classNames","children","_jsx","type","onClick","TodoList","React","memo","todos","map","todo","StatusFilter","TodoFilter","selectedFilter","setSelectedFilter","searchQuery","setSearchQuery","All","Active","Completed","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","TodoModal","_useState","useState","_useState2","_slicedToArray","selectedUser","setSelectedUser","useEffect","userId","concat","href","email","name","App","todosFromServer","setTodosFromServer","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","isErrorMessage","setIsErrorMessage","response","finally","visibleTodos","useMemo","arguments","length","undefined","filter","currentQuery","toLowerCase","includes","filterTodos","_Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9c6c90f.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todoFromServer: Todo;\n  setSelectedTodo: (todo: Todo | null) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  todoFromServer,\n  setSelectedTodo,\n  selectedTodo,\n}) => {\n  const { id, title, completed } = todoFromServer;\n  const isSelected = selectedTodo?.id === id;\n\n  const handleClickShowButton = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n      {completed\n        ? (\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n        ) : (\n          <td className=\"is-vcentered\" />\n        )}\n      <td\n        className=\"is-vcentered is-expanded\"\n      >\n        <p className={classNames(\n          { 'has-text-danger': !completed },\n          { 'has-text-success': completed },\n        )}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleClickShowButton(todoFromServer)}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far',\n                { 'fa-eye': !isSelected },\n                { 'fa-eye-slash': isSelected })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n  setSelectedTodo: (todo: Todo | null) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setSelectedTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todoFromServer={todo}\n          setSelectedTodo={setSelectedTodo}\n          selectedTodo={selectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n));\n","export enum StatusFilter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport { StatusFilter } from '../../types/StatusFilter';\n\ninterface Props {\n  selectedFilter: string;\n  setSelectedFilter: (value: string) => void;\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  selectedFilter,\n  setSelectedFilter,\n  searchQuery,\n  setSearchQuery,\n}) => {\n  const { All, Active, Completed } = StatusFilter;\n  const handleChangeFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedFilter(event.target.value);\n  };\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleClickDeleteButton = (() => {\n    setSearchQuery('');\n  });\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={handleChangeFilter}\n          >\n            <option value={All}>All</option>\n            <option value={Active}>Active</option>\n            <option value={Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClickDeleteButton}\n              aria-label=\"delete\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedTodo: Todo | null;\n  setSelectedTodo: (todo: Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = React.memo(({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setSelectedUser);\n    }\n  }, [selectedTodo]);\n\n  const handleClickDeleteButton = () => {\n    setSelectedTodo(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClickDeleteButton}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames(\n                { 'has-text-danger': !selectedTodo?.completed },\n                { 'has-text-success': selectedTodo?.completed },\n              )}\n              >\n                {selectedTodo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport './App.scss';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { StatusFilter } from './types/StatusFilter';\nimport { filterTodos } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [selectedFilter, setSelectedFilter] = useState<string>(StatusFilter.All);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorMessage, setIsErrorMessage] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(response => {\n        if ('Error' in response) {\n          setIsErrorMessage(true);\n        } else {\n          setTodosFromServer(response);\n        }\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => filterTodos(\n    todosFromServer,\n    selectedFilter,\n    searchQuery,\n  ), [selectedFilter, todosFromServer, searchQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedFilter={selectedFilter}\n                setSelectedFilter={setSelectedFilter}\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n              />\n            </div>\n\n            {isErrorMessage ? (\n              <div className=\"has-text-danger\">\n                Unable to load the todos\n              </div>\n\n            ) : (\n              <div className=\"block\">\n                {isLoading\n                  ? (\n                    <Loader />\n                  ) : (\n                    <TodoList\n                      todos={visibleTodos}\n                      setSelectedTodo={setSelectedTodo}\n                      selectedTodo={selectedTodo}\n                    />\n                  )}\n\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { StatusFilter } from './types/StatusFilter';\nimport { Todo } from './types/Todo';\n\nexport const filterTodos = (\n  todosFromServer: Todo[],\n  selectedFilter: string = StatusFilter.All,\n  searchQuery?: string,\n) => {\n  let todos = todosFromServer;\n  const { Active, Completed } = StatusFilter;\n\n  if (selectedFilter) {\n    switch (selectedFilter) {\n      case Active:\n        todos = todos.filter(todo => !todo.completed);\n        break;\n\n      case Completed:\n        todos = todos.filter(todo => todo.completed);\n        break;\n\n      default:\n        todos = todosFromServer;\n        break;\n    }\n  }\n\n  if (searchQuery) {\n    const currentQuery = searchQuery.toLowerCase();\n\n    todos = todos.filter(todo => todo.title\n      .toLowerCase().includes(currentQuery));\n  }\n\n  return todos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}