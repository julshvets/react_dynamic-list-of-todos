{"version":3,"sources":["api.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","types/StatusFilter.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","catch","Response","Error","TodoInfo","_ref","todo","setSelectedTodo","selectedTodo","id","title","completed","isSelected","_jsxs","className","classNames","children","_jsx","type","onClick","TodoList","React","memo","todos","map","StatusFilter","TodoFilter","selectedFilter","setSelectedFilter","searchQuery","setSearchQuery","onSubmit","event","preventDefault","value","onChange","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","_useState","useState","_useState2","_slicedToArray","selectedUser","setSelectedUser","useEffect","userId","concat","href","email","name","App","todosFromServer","setTodosFromServer","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","shouldShowError","setShouldShowError","response","finally","visibleTodos","useMemo","filterType","arguments","length","undefined","preparedQuery","toLowerCase","trim","filter","isTitleIncludesQuery","includes","filterTodos","_Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc9fe209.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  setSelectedTodo: (todo: Todo | null) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n  setSelectedTodo,\n  selectedTodo,\n}) => {\n  const { id, title, completed } = todo;\n  const isSelected = selectedTodo?.id === id;\n\n  const handleClickShowButton = () => {\n    setSelectedTodo(todo);\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n      {completed\n        ? (\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n        ) : (\n          <td className=\"is-vcentered\" />\n        )}\n      <td\n        className=\"is-vcentered is-expanded\"\n      >\n        <p className={classNames(\n          { 'has-text-danger': !completed },\n          { 'has-text-success': completed },\n        )}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleClickShowButton}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far',\n                { 'fa-eye': !isSelected },\n                { 'fa-eye-slash': isSelected })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n  setSelectedTodo: (todo: Todo | null) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setSelectedTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n          setSelectedTodo={setSelectedTodo}\n          selectedTodo={selectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n));\n","export enum StatusFilter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport { StatusFilter } from '../../types/StatusFilter';\n\ninterface Props {\n  selectedFilter: string;\n  setSelectedFilter: (value: string) => void;\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  selectedFilter,\n  setSelectedFilter,\n  searchQuery,\n  setSearchQuery,\n}) => {\n  const handleChangeFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedFilter(event.target.value);\n  };\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleClickDeleteButton = (() => {\n    setSearchQuery('');\n  });\n\n  const handleSubmit = (event: React.FormEvent) => event.preventDefault();\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={handleChangeFilter}\n          >\n            <option value={StatusFilter.All}>All</option>\n            <option value={StatusFilter.Active}>Active</option>\n            <option value={StatusFilter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClickDeleteButton}\n              aria-label=\"delete\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedTodo: Todo | null;\n  setSelectedTodo: (todo: Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = React.memo(({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setSelectedUser);\n    }\n  }, [selectedTodo]);\n\n  const handleClickDeleteButton = () => {\n    setSelectedTodo(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClickDeleteButton}\n              aria-label=\"delete button\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames(\n                { 'has-text-danger': !selectedTodo?.completed },\n                { 'has-text-success': selectedTodo?.completed },\n              )}\n              >\n                {selectedTodo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport './App.scss';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { StatusFilter } from './types/StatusFilter';\nimport { filterTodos } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [selectedFilter, setSelectedFilter] = useState<string>(StatusFilter.All);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [shouldShowError, setShouldShowError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(response => {\n        if ('Error' in response) {\n          setShouldShowError(true);\n        } else {\n          setTodosFromServer(response);\n        }\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => filterTodos(\n    todosFromServer,\n    selectedFilter,\n    searchQuery,\n  ), [selectedFilter, todosFromServer, searchQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedFilter={selectedFilter}\n                setSelectedFilter={setSelectedFilter}\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n              />\n            </div>\n\n            {shouldShowError ? (\n              <div className=\"has-text-danger\">\n                Unable to load the todos\n              </div>\n\n            ) : (\n              <div className=\"block\">\n                {isLoading\n                  ? (\n                    <Loader />\n                  ) : (\n                    <TodoList\n                      todos={visibleTodos}\n                      setSelectedTodo={setSelectedTodo}\n                      selectedTodo={selectedTodo}\n                    />\n                  )}\n\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { StatusFilter } from './types/StatusFilter';\nimport { Todo } from './types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[],\n  filterType: string = StatusFilter.All,\n  query: string,\n) => {\n  const preparedQuery = query.toLowerCase().trim();\n\n  return todos.filter(todo => {\n    const isTitleIncludesQuery = todo.title\n      .toLowerCase()\n      .includes(preparedQuery);\n\n    switch (filterType) {\n      case StatusFilter.All:\n        return isTitleIncludesQuery;\n\n      case StatusFilter.Completed:\n        return isTitleIncludesQuery && todo.completed;\n\n      case StatusFilter.Active:\n        return isTitleIncludesQuery && !todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}